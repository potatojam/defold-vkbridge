local vkbridge = require("vkbridge.vkbridge")
local druid = require("druid.druid")

---https://stackoverflow.com/questions/6075262/lua-table-tostringtablename-and-table-fromstringstringtable-functions
local function serializeTable(val, name, skipnewlines, depth)
    skipnewlines = skipnewlines or false
    depth = depth or 0
    local tmp = string.rep("  ", depth)
    if name then
        tmp = tmp .. name .. " = "
    end
    if type(val) == "table" then
        tmp = tmp .. "{" .. (not skipnewlines and "\n" or "")
        for k, v in pairs(val) do
            tmp = tmp .. serializeTable(v, k, skipnewlines, depth + 1) .. "," .. (not skipnewlines and "\n" or "")
        end
        tmp = tmp .. string.rep("  ", depth) .. "}"
    elseif type(val) == "number" then
        tmp = tmp .. tostring(val)
    elseif type(val) == "string" then
        tmp = tmp .. string.format("%q", val)
    elseif type(val) == "boolean" then
        tmp = tmp .. (val and "true" or "false")
    else
        tmp = tmp .. "\"[inserializeable datatype:" .. type(val) .. "]\""
    end
    return tmp
end

local function update_log(self)
    local metrix = gui.get_text_metrics_from_node(self.log_text)
    self.log_size.y = metrix.height * 0.5 + 10
    if self.log_size.y < 200 then
        self.log_size.y = 200
    end
    self.log_scroll:set_size(self.log_size)
    self.log_scroll:scroll_to_percent(self.percent_y_100)
end

local function print_log(self, method, data)
    pprint(method, data)
    local text = "[" .. os.date("%H:%M:%S") .. "] " .. method .. ": "
    if data then
        if type(data) == "table" then
            text = text .. serializeTable(data)
        else
            text = text .. data
        end
    end
    self.logs = self.logs .. text .. "\n"
    gui.set_text(self.log_text, self.logs)
    update_log(self)
end

local function on_subscribe(self, response)
    pprint("subscribe", response)
end

local function on_init_vk(self)
    vkbridge.init(function(self, err)
        print_log(self, "init", err or "VkBridge initialized")
    end)
end

local function on_check_interstitial(self)
    vkbridge.check_interstitial(function(self, err, data)
        print_log(self, "check_interstitial", err or data)
    end)
end

local function on_show_interstitial(self)
    vkbridge.show_interstitial(function(self, err, data)
        print_log(self, "show_interstitial", err or data)
    end)
end

local function on_check_rewarded(self)
    vkbridge.check_rewarded(true, function(self, err, data)
        print_log(self, "check_rewarded", err or data)
    end)
end

local function on_show_rewarded(self)
    vkbridge.show_rewarded(true, function(self, err, data)
        print_log(self, "show_rewarded", err or data)
    end)
end

local function on_storage_set(self)
    vkbridge.storage_set("test_key", "test_value", function(self, err, data)
        print_log(self, "on_storage_set", err or data)
    end)
end

local function on_storage_get(self)
    vkbridge.storage_get("test_key", function(self, err, data)
        print_log(self, "on_storage_get", err or data)
    end)
end

local function on_storage_get_keys(self)
    vkbridge.storage_get_keys(20, 0, function(self, err, data)
        print_log(self, "on_storage_get_keys", err or data)
    end)
end

function init(self)
    vkbridge.subscribe(on_subscribe)

    self.logs = ""
    self.percent_y_100 = vmath.vector3(0, 1, 0)
    self.druid = druid.new(self)
    self.log_scroll_content = gui.get_node("bkg_scroll_content")
    self.log_scroll = self.druid:new_scroll("mask", self.log_scroll_content)
    self.log_text = gui.get_node("txt_log")
    self.log_size = vmath.vector3(850, 200, 0)
    update_log(self)
    self.log_scroll:set_extra_stretch_size(0)

    self.druid:new_button("btn_init", on_init_vk)
    self.druid:new_button("btn_check_interstitial", on_check_interstitial)
    self.druid:new_button("btn_show_interstitial", on_show_interstitial)
    self.druid:new_button("btn_check_rewarded", on_check_rewarded)
    self.druid:new_button("btn_show_rewarded", on_show_rewarded)
    self.druid:new_button("btn_storage_set", on_storage_set)
    self.druid:new_button("btn_storage_get", on_storage_get)
    self.druid:new_button("btn_storage_get_keys", on_storage_get_keys)

    on_init_vk()
end

function update(self, dt)
    self.druid:update(dt)
end

function on_message(self, message_id, message, sender)
    self.druid:on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
    return self.druid:on_input(action_id, action)
end

function final(self)
    self.druid:final()
end
